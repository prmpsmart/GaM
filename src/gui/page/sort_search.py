#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.25.1
#  in conjunction with Tcl version 8.6
#    Dec 06, 2020 09:07:44 PM WAT  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import sort_search_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    sort_search_support.set_Tk_var()
    top = Toplevel1 (root)
    sort_search_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    sort_search_support.set_Tk_var()
    top = Toplevel1 (w)
    sort_search_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#800080'  # Closest X11 color: 'magenta4'
        _fgcolor = '#ffffff'  # X11 color: 'white'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font11 = "-family {Courier New} -size 10 -weight normal -slant"  \
            " roman -underline 0 -overstrike 0"
        font9 = "-family {Times New Roman} -size 11 -weight bold "  \
            "-slant roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font=font9)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("702x475")
        top.title("New Toplevel")
        top.configure(background="#800080")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Labelframe1 = tk.LabelFrame(top)
        self.Labelframe1.place(relx=0.014, rely=0.021, relheight=0.947
                , relwidth=0.969)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(font="-family {Times New Roman} -size 11 -weight bold")
        self.Labelframe1.configure(foreground="black")
        self.Labelframe1.configure(text='''Sort - Search''')
        self.Labelframe1.configure(background="#800080")
        self.Labelframe1.configure(highlightbackground="#d9d9d9")
        self.Labelframe1.configure(highlightcolor="black")

        self.Labelframe2 = tk.LabelFrame(self.Labelframe1)
        self.Labelframe2.place(relx=0.515, rely=0.044, relheight=0.211
                , relwidth=0.456, bordermode='ignore')
        self.Labelframe2.configure(relief='groove')
        self.Labelframe2.configure(font="-family {Times New Roman} -size 11 -weight bold")
        self.Labelframe2.configure(foreground="black")
        self.Labelframe2.configure(text='''Date''')
        self.Labelframe2.configure(background="#800080")
        self.Labelframe2.configure(highlightbackground="#d9d9d9")
        self.Labelframe2.configure(highlightcolor="black")

        self.Button1 = tk.Button(self.Labelframe2)
        self.Button1.place(relx=0.032, rely=0.211, height=31, width=289
                , bordermode='ignore')
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#ffffff")
        self.Button1.configure(background="#800080")
        self.Button1.configure(disabledforeground="#bf6030")
        self.Button1.configure(font="-family {Times New Roman} -size 14 -weight bold")
        self.Button1.configure(foreground="#ffffff")
        self.Button1.configure(highlightbackground="#800080")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(relief="groove")
        self.Button1.configure(text='''06/12/2020''')

        self.Radiobutton1 = tk.Radiobutton(self.Labelframe2)
        self.Radiobutton1.place(relx=0.032, rely=0.632, relheight=0.284
                , relwidth=0.197, bordermode='ignore')
        self.Radiobutton1.configure(activebackground="#ececec")
        self.Radiobutton1.configure(activeforeground="#ffffff")
        self.Radiobutton1.configure(background="#800080")
        self.Radiobutton1.configure(disabledforeground="#bf6030")
        self.Radiobutton1.configure(font="-family {Times New Roman} -size 11 -weight bold")
        self.Radiobutton1.configure(foreground="#ffffff")
        self.Radiobutton1.configure(highlightbackground="#800080")
        self.Radiobutton1.configure(highlightcolor="black")
        self.Radiobutton1.configure(justify='left')
        self.Radiobutton1.configure(offrelief="groove")
        self.Radiobutton1.configure(overrelief="ridge")
        self.Radiobutton1.configure(relief="groove")
        self.Radiobutton1.configure(text='''Year''')
        self.Radiobutton1.configure(variable=sort_search_support.selectedButton)

        self.Radiobutton2 = tk.Radiobutton(self.Labelframe2)
        self.Radiobutton2.place(relx=0.258, rely=0.632, relheight=0.284
                , relwidth=0.226, bordermode='ignore')
        self.Radiobutton2.configure(activebackground="#ececec")
        self.Radiobutton2.configure(activeforeground="#ffffff")
        self.Radiobutton2.configure(background="#800080")
        self.Radiobutton2.configure(disabledforeground="#bf6030")
        self.Radiobutton2.configure(font="-family {Times New Roman} -size 11 -weight bold")
        self.Radiobutton2.configure(foreground="#ffffff")
        self.Radiobutton2.configure(highlightbackground="#800080")
        self.Radiobutton2.configure(highlightcolor="black")
        self.Radiobutton2.configure(justify='left')
        self.Radiobutton2.configure(relief="groove")
        self.Radiobutton2.configure(text='''Month''')
        self.Radiobutton2.configure(variable=sort_search_support.selectedButton)

        self.Radiobutton2_1 = tk.Radiobutton(self.Labelframe2)
        self.Radiobutton2_1.place(relx=0.758, rely=0.632, relheight=0.284
                , relwidth=0.194, bordermode='ignore')
        self.Radiobutton2_1.configure(activebackground="#ececec")
        self.Radiobutton2_1.configure(activeforeground="#ffffff")
        self.Radiobutton2_1.configure(background="#800080")
        self.Radiobutton2_1.configure(disabledforeground="#bf6030")
        self.Radiobutton2_1.configure(font="-family {Times New Roman} -size 11 -weight bold")
        self.Radiobutton2_1.configure(foreground="#ffffff")
        self.Radiobutton2_1.configure(highlightbackground="#800080")
        self.Radiobutton2_1.configure(highlightcolor="black")
        self.Radiobutton2_1.configure(justify='left')
        self.Radiobutton2_1.configure(relief="groove")
        self.Radiobutton2_1.configure(text='''Day''')
        self.Radiobutton2_1.configure(variable=sort_search_support.selectedButton)

        self.Radiobutton2_2 = tk.Radiobutton(self.Labelframe2)
        self.Radiobutton2_2.place(relx=0.516, rely=0.632, relheight=0.284
                , relwidth=0.226, bordermode='ignore')
        self.Radiobutton2_2.configure(activebackground="#ececec")
        self.Radiobutton2_2.configure(activeforeground="#ffffff")
        self.Radiobutton2_2.configure(background="#800080")
        self.Radiobutton2_2.configure(disabledforeground="#bf6030")
        self.Radiobutton2_2.configure(font="-family {Times New Roman} -size 11 -weight bold")
        self.Radiobutton2_2.configure(foreground="#ffffff")
        self.Radiobutton2_2.configure(highlightbackground="#800080")
        self.Radiobutton2_2.configure(highlightcolor="black")
        self.Radiobutton2_2.configure(justify='left')
        self.Radiobutton2_2.configure(relief="groove")
        self.Radiobutton2_2.configure(text='''Week''')
        self.Radiobutton2_2.configure(variable=sort_search_support.selectedButton)

        self.Labelframe3 = tk.LabelFrame(self.Labelframe1)
        self.Labelframe3.place(relx=0.515, rely=0.289, relheight=0.211
                , relwidth=0.456, bordermode='ignore')
        self.Labelframe3.configure(relief='groove')
        self.Labelframe3.configure(font="-family {Times New Roman} -size 11 -weight bold")
        self.Labelframe3.configure(foreground="black")
        self.Labelframe3.configure(text='''Record''')
        self.Labelframe3.configure(background="#800080")
        self.Labelframe3.configure(highlightbackground="#d9d9d9")
        self.Labelframe3.configure(highlightcolor="black")

        self.Label1 = tk.Label(self.Labelframe3)
        self.Label1.place(relx=0.032, rely=0.211, height=27, width=56
                , bordermode='ignore')
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#800080")
        self.Label1.configure(disabledforeground="#bf6030")
        self.Label1.configure(font="-family {Times New Roman} -size 11 -weight bold")
        self.Label1.configure(foreground="#ffffff")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(relief="groove")
        self.Label1.configure(text='''Note''')

        self.Entry1 = tk.Entry(self.Labelframe3)
        self.Entry1.place(relx=0.258, rely=0.211, height=26, relwidth=0.703
                , bordermode='ignore')
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#bf6030")
        self.Entry1.configure(font="-family {Courier New} -size 10")
        self.Entry1.configure(foreground="#ffffff")
        self.Entry1.configure(highlightbackground="#d9d9d9")
        self.Entry1.configure(highlightcolor="black")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(selectbackground="#c4c4c4")
        self.Entry1.configure(selectforeground="black")

        self.Label2 = tk.Label(self.Labelframe3)
        self.Label2.place(relx=0.032, rely=0.579, height=27, width=55
                , bordermode='ignore')
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#800080")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font="-family {Times New Roman} -size 11 -weight bold")
        self.Label2.configure(foreground="#ffffff")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(relief="groove")
        self.Label2.configure(text='''Range''')

        self.Entry1_1 = tk.Entry(self.Labelframe3)
        self.Entry1_1.place(relx=0.258, rely=0.579, height=26, relwidth=0.703
                , bordermode='ignore')
        self.Entry1_1.configure(background="white")
        self.Entry1_1.configure(disabledforeground="#bf6030")
        self.Entry1_1.configure(font="-family {Courier New} -size 10")
        self.Entry1_1.configure(foreground="#ffffff")
        self.Entry1_1.configure(highlightbackground="#d9d9d9")
        self.Entry1_1.configure(highlightcolor="black")
        self.Entry1_1.configure(insertbackground="black")
        self.Entry1_1.configure(selectbackground="#c4c4c4")
        self.Entry1_1.configure(selectforeground="black")

        self.Frame1 = tk.Frame(self.Labelframe1)
        self.Frame1.place(relx=0.515, rely=0.533, relheight=0.433, relwidth=0.459
                , bordermode='ignore')
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#800080")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.TNotebook1 = ttk.Notebook(self.Frame1)
        self.TNotebook1.place(relx=0.016, rely=0.026, relheight=0.974
                , relwidth=0.984)
        self.TNotebook1.configure(takefocus="")
        self.TNotebook1_t0 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t0, padding=3)
        self.TNotebook1.tab(0, text="Sub-regions", compound="left", underline="-1"
                ,)
        self.TNotebook1_t0.configure(background="#800080")
        self.TNotebook1_t0.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t0.configure(highlightcolor="black")
        self.TNotebook1_t1 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t1, padding=3)
        self.TNotebook1.tab(1, text="Records Managers", compound="left"
                ,underline="-1", )
        self.TNotebook1_t1.configure(background="#800080")
        self.TNotebook1_t1.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t1.configure(highlightcolor="black")

        self.Scrolledlistbox1_3 = ScrolledListBox(self.TNotebook1_t0)
        self.Scrolledlistbox1_3.place(relx=0.0, rely=0.0, relheight=1.0
                , relwidth=1.003)
        self.Scrolledlistbox1_3.configure(background="white")
        self.Scrolledlistbox1_3.configure(disabledforeground="#a3a3a3")
        self.Scrolledlistbox1_3.configure(font=font11)
        self.Scrolledlistbox1_3.configure(foreground="black")
        self.Scrolledlistbox1_3.configure(highlightbackground="#d9d9d9")
        self.Scrolledlistbox1_3.configure(highlightcolor="#800080")
        self.Scrolledlistbox1_3.configure(selectbackground="#c4c4c4")
        self.Scrolledlistbox1_3.configure(selectforeground="black")

        self.Scrolledlistbox1_3 = ScrolledListBox(self.TNotebook1_t1)
        self.Scrolledlistbox1_3.place(relx=0.0, rely=0.0, relheight=1.0
                , relwidth=1.0)
        self.Scrolledlistbox1_3.configure(background="white")
        self.Scrolledlistbox1_3.configure(disabledforeground="#a3a3a3")
        self.Scrolledlistbox1_3.configure(font=font11)
        self.Scrolledlistbox1_3.configure(foreground="black")
        self.Scrolledlistbox1_3.configure(highlightbackground="#d9d9d9")
        self.Scrolledlistbox1_3.configure(highlightcolor="#800080")
        self.Scrolledlistbox1_3.configure(selectbackground="#c4c4c4")
        self.Scrolledlistbox1_3.configure(selectforeground="black")

        self.Labelframe4 = tk.LabelFrame(self.Labelframe1)
        self.Labelframe4.place(relx=0.015, rely=0.044, relheight=0.456
                , relwidth=0.485, bordermode='ignore')
        self.Labelframe4.configure(relief='groove')
        self.Labelframe4.configure(font="-family {Times New Roman} -size 11 -weight bold")
        self.Labelframe4.configure(foreground="black")
        self.Labelframe4.configure(text='''Labelframe''')
        self.Labelframe4.configure(background="#800080")
        self.Labelframe4.configure(highlightbackground="#d9d9d9")
        self.Labelframe4.configure(highlightcolor="black")

        self.Label3 = tk.Label(self.Labelframe4)
        self.Label3.place(relx=0.061, rely=0.146, height=23, width=63
                , bordermode='ignore')
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#800080")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(font="-family {Times New Roman} -size 11 -weight bold")
        self.Label3.configure(foreground="#ffffff")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(relief="groove")
        self.Label3.configure(text='''Area''')

        self.Label3_1 = tk.Label(self.Labelframe4)
        self.Label3_1.place(relx=0.303, rely=0.146, height=23, width=63
                , bordermode='ignore')
        self.Label3_1.configure(activebackground="#f9f9f9")
        self.Label3_1.configure(activeforeground="black")
        self.Label3_1.configure(background="white")
        self.Label3_1.configure(disabledforeground="#a3a3a3")
        self.Label3_1.configure(font="-family {Times New Roman} -size 11 -weight bold")
        self.Label3_1.configure(foreground="black")
        self.Label3_1.configure(highlightbackground="#d9d9d9")
        self.Label3_1.configure(highlightcolor="black")
        self.Label3_1.configure(relief="sunken")
        self.Label3_1.configure(text='''Area''')

        self.Label3_2 = tk.Label(self.Labelframe4)
        self.Label3_2.place(relx=0.061, rely=0.293, height=23, width=63
                , bordermode='ignore')
        self.Label3_2.configure(activebackground="#f9f9f9")
        self.Label3_2.configure(activeforeground="black")
        self.Label3_2.configure(background="#800080")
        self.Label3_2.configure(disabledforeground="#a3a3a3")
        self.Label3_2.configure(font="-family {Times New Roman} -size 11 -weight bold")
        self.Label3_2.configure(foreground="#ffffff")
        self.Label3_2.configure(highlightbackground="#d9d9d9")
        self.Label3_2.configure(highlightcolor="black")
        self.Label3_2.configure(relief="groove")
        self.Label3_2.configure(text='''Client''')

        self.Label3_2 = tk.Label(self.Labelframe4)
        self.Label3_2.place(relx=0.303, rely=0.293, height=23, width=166
                , bordermode='ignore')
        self.Label3_2.configure(activebackground="#f9f9f9")
        self.Label3_2.configure(activeforeground="black")
        self.Label3_2.configure(background="white")
        self.Label3_2.configure(disabledforeground="#a3a3a3")
        self.Label3_2.configure(font="-family {Times New Roman} -size 11 -weight bold")
        self.Label3_2.configure(foreground="black")
        self.Label3_2.configure(highlightbackground="#d9d9d9")
        self.Label3_2.configure(highlightcolor="black")
        self.Label3_2.configure(relief="sunken")
        self.Label3_2.configure(text='''Apata Miracle Peter''')

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)
    def size_(self):
        sz = tk.Listbox.size(self)
        return sz

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





